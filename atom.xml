<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://horiejunkie.github.io/atom.xml" rel="self"/>
  
  <link href="https://horiejunkie.github.io/"/>
  <updated>2023-07-05T05:14:57.000Z</updated>
  <id>https://horiejunkie.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你最喜欢的日语词是什么？</title>
    <link href="https://horiejunkie.github.io/article/1117/"/>
    <id>https://horiejunkie.github.io/article/1117/</id>
    <published>2023-07-05T05:00:43.000Z</published>
    <updated>2023-07-05T05:14:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Noriko老师的日语学习播客中，有一期提及了这样一个问题——“你最喜欢的日语词是什么”。Noriko老师说这个问题的来源是一家语言学校的面试。她有一位学生最喜欢的是「木漏れ日」。</p><p>木漏れ日的意思就是从树枝和树叶间漏过去的阳光。这是一个很有画面感和诗意的词，在歌词里也很常见，日语初学者很难不对它印象深刻。对于母语里有汉字的学习者，“木”和“日”这样自带生命力和意象，加上“漏”这个自带修辞的动作，和一个日里本气的假名，木漏れ日不愧是一个要素齐全的大美词。</p><p>然后我就想我的“最爱美词”是什么。代入这个问题的答题背景，在我贫瘠的词汇和应激之下，我第一时间想到的词竟然是……「一生懸命」。“懸命”的意思就拼命，“一生懸命”的意思就是拼尽全力、竭尽所能。这个词语意中化，朗朗上口，又好辨认，光是读到脑海中就浮现小学课本上“头悬梁，锥刺股”的名人轶事；在晨间奋斗日剧和热血anime的双重熏陶下，“一生懸命”可谓是相当出圈的伪中国语之一。若是代回语校面试的背景，面对这个词的一腔热忱，面试老师给我120分应该不为过。从中，我本人难易的中性也可见一斑。</p><p>我继续想到一个学日语以来印象深刻的词——「心中」。第一次记得这个词是四谎里宫园薰的灵魂发问：「あたしと心中しない？（要和我一起殉情吗？）」后面还有闻者伤心见者落泪的《昭和元禄落语心中》，看过的懂得都懂。下面聊聊这个词。</p><p>心中(shinjuu)常被翻成殉情。这个词读作shinchuu的时候也有中文里“内心”的意思，但殉情的含义更为人熟知；而这个含义也在现代语境下进一步拓展，直翻成“约定自杀”更合适。现在也有「一家心中（一家人相约自杀）」、「無理心中（强迫恋人自杀后自己再自杀）」的概念。当然它最常用的含义仍是殉情，尤其指恋爱的双方相约自杀。</p><p>（P.S. 顺带提一句，像心中这样中日语里含义不同的词，不在标题里翻出来，我认为是下下策，弥散出一种译者的傲慢。昨天我还跟🍄聊到「大正少女御伽话」这个标题，「御伽話（民间故事）」这种词，保留在标题里观众看不懂，但起码不会引起歧义，观众有心就会自己查一下；心中这种词留着简直贻害无穷。说到底翻译最起码的意义是让人看懂。）</p><p>然后聊一下这个汉语的舶来词是怎么发展出殉情的意思的。我查了几篇论文，据考证，心中一词在17世纪之前都与汉语相近，意指“真心实意”。比如「心中立」，指的就是向相爱的对方表达自己真心实意的爱情。</p><p>心中一词含义的转变起源于古代日本游郭（风俗区域）的游女。她们大多是出身贫寒而被家庭卖到妓院的悲惨女子。这些女子无法脱身于游郭，终日郁郁寡欢。由于落后的医疗卫生条件，多数游女不到三十岁就会罹患疾病而死；即使运气好免于病痛，也会因为年岁积累而失去职业价值，被游郭丢到寺庙自生自灭。</p><p>在古代日本佛教思想的熏陶下，民众相信死后可以往生；游女也希望可以遇到爱情，往世摆脱此生的苦难。她们若是遇到了心爱的客人，便会将自己的头发、指甲，甚至是一截断指、胳膊和腿的肉，放在「心中箱」中，作为相约殉情的证物赠予爱人，然后自杀或者相约殉情。</p><p>自18世纪起日本社会多有此类殉情事件发生。民间的心中事件影响广泛，发生一起心中就会有一连串的心中发生；以此为题材创作的净琉璃（一种日本民间的曲艺形式）进一步加大了心中题材在民间的影响，自此心中的本意逐渐为殉情所取代。中国古代也不乏风尘女子自杀的故事，比如明代的《杜十娘怒沉百宝箱》，但和男人一起死的游女就比较少，大部分都是被男人坑了的女人。</p><p>（PP.S. 这点中日文化衍生出的“相似而不同”在其他民间流传的故事里有体现，比如前段时间看的小林正树导演、小泉八云的《怪谈》。以后要是能憋出什么东西我再来讲。）</p><p>现代日本也有著名的「心中」事件发生。2005年福井县发现了一对在废弃的火葬场心中的年老无嗣的夫妇，丈夫80岁，妻子82岁。他们在深夜开车，漫游充满回忆的街道，最后来到废弃的火葬场。伴着车里播放着的古典音乐，这对夫妇进入焚化炉、点燃火然后关上了门。第二天市政府收到了丈夫提前寄来的遗嘱，将其所有资产捐献给市里。据调查，这对夫妇琴瑟和谐，妻子罹患糖尿病并早年出现了认知障碍，几乎无法行走；丈夫负责妻子的所有护理工作。他们的自杀被归因为对未来的绝望。</p><p>总之，写了这么多，起初只是在思考“喜欢的日语单词”；接触过的动画和中日不同含义的叠加给了心中朦胧之美；一念之后调查了心中的发展和演变，喟叹这两个字上流转的文化和哀愁，总归就是很有意思。</p><p>（PPP.S. 起初我问🍄她最喜欢的词是什么，毫不犹豫答曰「たんぽぽ（tanpopo；蒲公英）」。在这样音律和意象而生的好感的映衬之下，我这种初中就开始查各种死的意象的阴暗比实在自惭形秽。不过她说，读了川端康成的同名绝笔后，好感似乎也发生了变化。可以见得，不光是词的含义，就连人附会的感情也总是在一同流转的啊。）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Noriko老师的日语学习播客中，有一期提及了这样一个问题——“你最喜欢的日语词是什么”。Noriko老师说这个问题的来源是一家语言学校的面试。她有一位学生最喜欢的是「木漏れ日」。&lt;/p&gt;
&lt;p&gt;木漏れ日的意思就是从树枝和树叶间漏过去的阳光。这是一个很有画面感和诗意的词，在</summary>
      
    
    
    
    
    <category term="Japanese" scheme="https://horiejunkie.github.io/tags/Japanese/"/>
    
  </entry>
  
  <entry>
    <title>解决macOS的间歇性卡死问题</title>
    <link href="https://horiejunkie.github.io/article/77b3be67/"/>
    <id>https://horiejunkie.github.io/article/77b3be67/</id>
    <published>2023-06-10T12:43:44.000Z</published>
    <updated>2023-06-17T06:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>我使用M1 macbook air，系统为macOS Venture，使用过程中，会间歇性遭遇到系统卡死问题。出现问题时，各app均无法控制，键盘输入卡顿显著，鼠标持续呈彩虹圈，但已打开的app（如正在播放的音乐等）仍能正常工作。重启系统后问题解决，但过一段时间（1～2天后）问题又会再度出现。</p><p>经过长时间的搜索，最终确定该问题是由macOS的原生中文输入法导致的。该问题隐蔽又难以定位，且仅在体量本来就较小的macOS中文圈才存在。这个问题似乎在很早期版本的macOS就存在并持续至今，但并非会在所有用户的macOS中出现。问题的具体原因仍不清楚。</p><p>接下来给出几种解决该问题的方法。</p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="2-1-出现卡死时，杀掉输入法进程"><a href="#2-1-出现卡死时，杀掉输入法进程" class="headerlink" title="2.1. 出现卡死时，杀掉输入法进程"></a>2.1. 出现卡死时，杀掉输入法进程</h3><p>处于卡死状态时，杀掉输入法进程即可让系统恢复常态。有以下几种选择：</p><h4 id="2-1-1-从任务监视器杀掉进程"><a href="#2-1-1-从任务监视器杀掉进程" class="headerlink" title="2.1.1. 从任务监视器杀掉进程"></a>2.1.1. 从任务监视器杀掉进程</h4><p>打开任务监视器，如下图找到中文输入法进程，点quit关掉它。</p><img src="/article/77b3be67/1.png" class="" title="杀死中文输入法进程"><h4 id="2-1-2-从终端杀掉进程"><a href="#2-1-2-从终端杀掉进程" class="headerlink" title="2.1.2. 从终端杀掉进程"></a>2.1.2. 从终端杀掉进程</h4><p>打开终端，输入并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token variable"><span class="token variable">`</span>pgrep SCIM<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以上代码中：</p><ul><li>kill：发送一个强制杀死的信号给指定的进程。</li><li><code>pgrep SCIM</code>：查找所有名称为 SCIM 的进程，并返回它们的 PID （进程 ID）。注意这里输入的是<strong>反引号</strong>（&#96;，键盘1左边的那个按键）而不是单引号。</li></ul></blockquote><h4 id="2-1-3-预设杀进程脚本"><a href="#2-1-3-预设杀进程脚本" class="headerlink" title="2.1.3. 预设杀进程脚本"></a>2.1.3. 预设杀进程脚本</h4><p>在系统卡死的情况下，输入这串代码也不是那么容易。一种替代的办法是使用工作流app，在卡死时执行预设的这段代码，帮我们省下敲键盘的时间。</p><p>以最常用的Alfred为例，在工作流中新建一个两步的工作流，第一步是键盘输入，名称随便起，但唤起该工作流的关键词越短越好（卡死的时候输入每一个字符都很耗时），我这里设置的是doit：</p><img src="/article/77b3be67/2.png" class="" title="键盘输入"><p>第二步是执行脚本，按下图设置：</p><img src="/article/77b3be67/3.png" class="" title="执行脚本"><p>这样，在卡死的时候，唤起Alfred，输入doit即可执行前文杀掉输入法进程的命令，省下一些卡死的时间。</p><h3 id="2-2-预设定时杀脚本任务"><a href="#2-2-预设定时杀脚本任务" class="headerlink" title="2.2. 预设定时杀脚本任务"></a>2.2. 预设定时杀脚本任务</h3><p>以上杀脚本的方法可以临时解决卡死问题，但始终是治标不治本。我们不希望卡死的状态在一些诸如会议的时刻发生。那么可以预设一个定时杀脚本的任务。</p><blockquote><p>macOS执行定期脚本的工具是cron。它可以让用户在指定的时间间隔内执行某个命令或者某些脚本。一个 cron表达式通常由6个或7个用空格或者制表符分隔的时间字段组成，包括秒、分、小时、日期、月份和星期几。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">30</span> <span class="token number">5</span> * * * /usr/bin/reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个cron表示在每天的凌晨5点30分钟重启计算机。</p></blockquote><p>接下来我们来设置一个定期杀输入法进程的任务。打开终端，输入并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里的<code>-e</code>将执行文字编辑器来设置cron任务。如果你没有设置过环境变量，默认的编辑器是VI。还有其他可执行的命令包括：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span> <span class="token comment">#显示当前的任务列表</span><span class="token function">crontab</span> <span class="token parameter variable">-r</span> <span class="token comment">#删除当前的任务列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>执行命令后，我们会看到如下提示符：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">□~~~~~~~~<span class="token string">"/tmp/crontab.LUSbqPLkBv"</span> 1L, 30B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在显示的是一个空白的cron文件。<code>□</code>是我们的游标位置，<code>~</code>显示这个文件中没有任何内容。我们可以用方向键控制游标在文件中的位置。</p><p>VI编辑器有三种模式，我们现在处于命令模式。点击快捷键<code>i</code>进入编辑模式，会看到下方提示符变为了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--INSERT--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时从命令模式进入编辑模式，输入下列定时任务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> */2 * * * <span class="token function">kill</span> <span class="token variable"><span class="token variable">`</span>pgrep SCIM<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>*/n</code>的意思是每隔n个时间（根据所在位置决定），那么该代码的意思就是每2小时执行一次杀死输入法进程的命令。然后点<code>Esc</code>回到命令模式，输入并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:wq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后会从cron文件中退出。再次输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果设置成功的话，我们会看到刚刚设置的定时任务。定时杀死输入法进程的任务也就设置好了。但经测试，进程卡死的发生存在随机性，这种方法也不能完全根除这个问题。</p><h3 id="2-3-其他可能有效的方法"><a href="#2-3-其他可能有效的方法" class="headerlink" title="2.3. 其他可能有效的方法"></a>2.3. 其他可能有效的方法</h3><p>最简单有效的方法是不使用macOS原生的中文输入法。但因为一个bug而弃用整个输入法未免有些因噎废食。</p><p><a href="https://medium.com/@tobemaster/%E8%A7%A3%E5%86%B3-mac-%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E5%8D%A1%E9%A1%BF-4a8ab8a30415">这篇文章</a>给出了一系列调整可能导致该问题的设置的方法，包括节电模式、自定义短语、Chrome等，但这些问题在我的macOS上并不存在，也许会对一部分用户起作用，可以尝试。</p><p>bilibili的<a href="https://www.bilibili.com/video/BV1h24y1r7YK">这个视频</a>表示关闭<code>Capslock</code>的中英切换可以解决问题，评论也表示关闭“触控栏输入建议”也可以解决问题。我不希望关闭<code>Capslock</code>的切换功能。各位也可以尝试一下。</p><h2 id="3-鸣谢"><a href="#3-鸣谢" class="headerlink" title="3. 鸣谢"></a>3. 鸣谢</h2><p>最初找到这个问题的原因是在V2EX的<a href="https://www.v2ex.com/t/898744">这个帖子</a>，并根据简书上的<a href="https://www.jianshu.com/p/ec2729d485a8">这篇文章</a>设置了杀进程的任务。感谢文章中提及的所有内容贡献者，希望这个bug早日得到修复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;我使用M1 macbook air，系统为macOS Venture，使用过程中，会间歇性遭遇到系统卡死问题。出现问题时</summary>
      
    
    
    
    <category term="technology" scheme="https://horiejunkie.github.io/categories/technology/"/>
    
    
    <category term="macOS" scheme="https://horiejunkie.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>My first blog!</title>
    <link href="https://horiejunkie.github.io/article/843b0170/"/>
    <id>https://horiejunkie.github.io/article/843b0170/</id>
    <published>2023-06-10T06:53:29.000Z</published>
    <updated>2023-06-19T07:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, world!</p><p>This is my first blog! I quite spent some time on it. I’m a extremely beginner of coding work and I hope such time on my blog become kind of hobby in my spare time.</p><p>Thanks for detailed tutorials on building the github-based blog in the Internet. I hope I could make a more updated guide based on these brilliant work in the near future. And thanks for <a href="https://github.com/adisaktijrs/hexo-theme-minima">adisaktijrs’s nice theme</a> which I am using on this page. This is my favorite one among Hexo Theme’s page.</p><p>How about let’s start with it!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello, world!&lt;/p&gt;
&lt;p&gt;This is my first blog! I quite spent some time on it. I’m a extremely beginner of coding work and I hope such time o</summary>
      
    
    
    
    
  </entry>
  
</feed>
